module RNA.MoleculeSpec (spec) where

import           GoldenStandard
import qualified Nucleotide     as Nuc
import qualified RNA

import qualified Data.Map.Lazy as Map
import qualified Prelude

import NucleotideSpec  ()
import Test.Hspec
import Test.QuickCheck

sampleGene :: Prelude.String
sampleGene
  = "UCAGACUGGUGCCGUGGUGCUCUCGCCCGAUGUGACGUCGACCGCCAGCGGCGCGAUGACGCCGAGGAUUUCCGU\
    \GAUCGUUUCGGAGGGCACGCCGGCUGCGGUCAGCGCGUCGGCCAAGUGUCCGGCGACCAGGCUGAAGUGGUGCAU\
    \GGUAAUUCCGCGCCCCUGAUGGACUUGCUUCAUCGGCGCACCGGUAUAGGGCUCGGGCCCGCCAAGCGCGGCCGC\
    \GAAAAACUCCACCUGCUUGCCCUUGAGGCGGCUCAUGUUCGUACCGCUGAAGAAGGCCGAUAGUUGGUCAUCGGC\
    \AAGCACACGAACAUAGAAGUCCUCGACGACGACUUCGAUGGCCUCAUGCCCGCCGAUCUUGUCGUAGAUGCUGAU\
    \CGGCUCACGUUUGCGCAAGCGUGACAGUAGUCCCAUUUUUAUA"

sampleComplement :: Prelude.String
sampleComplement
  = "AGUCUGACCACGGCACCACGAGAGCGGGCUACACUGCAGCUGGCGGUCGCCGCGCUACUGCGGCUCCUAAAGGCA\
    \CUAGCAAAGCCUCCCGUGCGGCCGACGCCAGUCGCGCAGCCGGUUCACAGGCCGCUGGUCCGACUUCACCACGUA\
    \CCAUUAAGGCGCGGGGACUACCUGAACGAAGUAGCCGCGUGGCCAUAUCCCGAGCCCGGGCGGUUCGCGCCGGCG\
    \CUUUUUGAGGUGGACGAACGGGAACUCCGCCGAGUACAAGCAUGGCGACUUCUUCCGGCUAUCAACCAGUAGCCG\
    \UUCGUGUGCUUGUAUCUUCAGGAGCUGCUGCUGAAGCUACCGGAGUACGGGCGGCUAGAACAGCAUCUACGACUA\
    \GCCGAGUGCAAACGCGUUCGCACUGUCAUCAGGGUAAAAAUAU"

spec :: Spec
spec = do
  describe "complement" $ do
    it "calculates the RNA complement strand" $ do
      let Right rna = RNA.parseRNASeq sampleGene

          Right complement = RNA.parseRNASeq sampleComplement

      fmap RNA.complement rna `shouldBe` complement

    it "complement . complement === identity" $ property
      $ \nuc -> nuc /= Nuc.T ==>
          let Right rnaNuc = RNA.mkRNANucleotide nuc

          in RNA.complement (RNA.complement rnaNuc) == rnaNuc
