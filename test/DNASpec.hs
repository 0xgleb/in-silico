module DNASpec (spec) where

import qualified DNA
import qualified Nucleotide as Nuc

import qualified Data.Map.Lazy as Map
import qualified Prelude
import           Protolude     hiding (complement)

import NucleotideSpec  ()
import Test.Hspec
import Test.QuickCheck

sampleGene :: Prelude.String
sampleGene
  = "TCAGACTGGTGCCGTGGTGCTCTCGCCCGATGTGACGTCGACCGCCAGCGGCGCGATGACGCCGAGGATTTCCGT\
    \GATCGTTTCGGAGGGCACGCCGGCTGCGGTCAGCGCGTCGGCCAAGTGTCCGGCGACCAGGCTGAAGTGGTGCAT\
    \GGTAATTCCGCGCCCCTGATGGACTTGCTTCATCGGCGCACCGGTATAGGGCTCGGGCCCGCCAAGCGCGGCCGC\
    \GAAAAACTCCACCTGCTTGCCCTTGAGGCGGCTCATGTTCGTACCGCTGAAGAAGGCCGATAGTTGGTCATCGGC\
    \AAGCACACGAACATAGAAGTCCTCGACGACGACTTCGATGGCCTCATGCCCGCCGATCTTGTCGTAGATGCTGAT\
    \CGGCTCACGTTTGCGCAAGCGTGACAGTAGTCCCATTTTTATA"

sampleComplement :: Prelude.String
sampleComplement
  = "AGTCTGACCACGGCACCACGAGAGCGGGCTACACTGCAGCTGGCGGTCGCCGCGCTACTGCGGCTCCTAAAGGCA\
    \CTAGCAAAGCCTCCCGTGCGGCCGACGCCAGTCGCGCAGCCGGTTCACAGGCCGCTGGTCCGACTTCACCACGTA\
    \CCATTAAGGCGCGGGGACTACCTGAACGAAGTAGCCGCGTGGCCATATCCCGAGCCCGGGCGGTTCGCGCCGGCG\
    \CTTTTTGAGGTGGACGAACGGGAACTCCGCCGAGTACAAGCATGGCGACTTCTTCCGGCTATCAACCAGTAGCCG\
    \TTCGTGTGCTTGTATCTTCAGGAGCTGCTGCTGAAGCTACCGGAGTACGGGCGGCTAGAACAGCATCTACGACTA\
    \GCCGAGTGCAAACGCGTTCGCACTGTCATCAGGGTAAAAATAT"

sampleReverseComplement :: Prelude.String
sampleReverseComplement
  = "TATAAAAATGGGACTACTGTCACGCTTGCGCAAACGTGAGCCGATCAGCATCTACGACAAGATCGGCGGGCATGA\
    \GGCCATCGAAGTCGTCGTCGAGGACTTCTATGTTCGTGTGCTTGCCGATGACCAACTATCGGCCTTCTTCAGCGG\
    \TACGAACATGAGCCGCCTCAAGGGCAAGCAGGTGGAGTTTTTCGCGGCCGCGCTTGGCGGGCCCGAGCCCTATAC\
    \CGGTGCGCCGATGAAGCAAGTCCATCAGGGGCGCGGAATTACCATGCACCACTTCAGCCTGGTCGCCGGACACTT\
    \GGCCGACGCGCTGACCGCAGCCGGCGTGCCCTCCGAAACGATCACGGAAATCCTCGGCGTCATCGCGCCGCTGGC\
    \GGTCGACGTCACATCGGGCGAGAGCACCACGGCACCAGTCTGA"

spec :: Spec
spec = do
  describe "complement" $ do
    it "calculates the DNA complement strand" $ do
      fmap DNA.complement (DNA.parseDNASeq sampleGene) `shouldBe` DNA.parseDNASeq sampleComplement

    it "complement . complement === identity" $ property
      $ \nucs ->
          let Right dnaNucs = sequence $ DNA.mkDNANucleotide <$> filter (/= Nuc.U) nucs

          in DNA.complement (DNA.complement dnaNucs) == dnaNucs

  describe "reverseComplement" $ do
    it "calculates the DNA reverse complement strand" $ do
      fmap DNA.reverseComplement (DNA.parseDNASeq sampleGene)
        `shouldBe` DNA.parseDNASeq sampleReverseComplement
