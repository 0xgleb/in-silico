module NucleotideSpec (spec) where

import Nucleotide

import qualified Prelude
import           Protolude
import qualified Data.Map.Lazy as Map

import Test.Hspec

testSeq :: Prelude.String
testSeq = "ACAACATACAAAGGGCCACAGATACATCAAAAAATGCTCAACATCACTATTTGTCAGGGAAGTACTAATTAAAACCAAAATGAGATGTCCCCTCAAACCTGTTAGAATGGCTATTATCAAAAAGATGAAAGATAGCAACTATCAGAGAGGATGATAGAAAAGGGAACCCTTGCATCATGTACAAATTAAAAATAGAACTATCACATGATCCAAGAATCCTACTTCTGGGTATATAGCCAAAGGAATTGAAATCAATATGTCAAAGGGATATCTGCACTCCTATGTTATTGCAGCATGTTCACAATGGCCAAGATATAGAATCAACCTAACTGTTCATAGACAGATGAATGGATAAATGAAATGTGATATGGAAAATTATTCAGCCTTAAAAACAGTAGGAAATTCTGTCATTTGAGACAACGTGGATGAACCTAGAGGACATTAAGCTAAGTGAAATAAGCTAGACACAGAAAGACAAATATTGCATGATCTCACTTAGAATCTAAAAAATCTGAACTCATAGAAGCAGAGAATAGTATGATGGTTACTAGGGTTATCTGGCAGGGAGAGGATGAGGAAATGGGACATTGTTAATAAAAGGAAAAAAATTCAATTAGTAGG"

spec :: Spec
spec = do
  describe "parseNucs" $ do
    it "parses nucleotide strings" $ do
      parseNucs "ACAATGC" `shouldBe` Just [A, C, A, A, T, G, C]

  describe "countNucs" $ do
    it "returns a map of nucleotides and number of them in the sequence" $ do
      fmap countNucs (parseNucs testSeq)
        `shouldBe` Just (Map.fromList [(A, 255), (C, 95), (T, 149), (G, 122)])
